/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Connect
 * Full-stack app.
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

import type {
  PostSubscriptions201,
  PostSubscriptions400,
  PostSubscriptionsBody,
} from '../../models'

/**
 * @summary Subscriber someone to the event
 */
export const getPostSubscriptionsUrl = () => {
  return `http://localhost:3333/subscriptions`
}

export const postSubscriptions = async (
  postSubscriptionsBody: PostSubscriptionsBody,
  options?: RequestInit,
): Promise<PostSubscriptions201> => {
  const res = await fetch(getPostSubscriptionsUrl(), {
    ...options,
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    body: JSON.stringify(postSubscriptionsBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: PostSubscriptions201 = body ? JSON.parse(body) : {}

  return data
}

export const getPostSubscriptionsMutationOptions = <
  TError = PostSubscriptions400,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSubscriptions>>,
    TError,
    {
      data: PostSubscriptionsBody
    },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof postSubscriptions>>,
  TError,
  {
    data: PostSubscriptionsBody
  },
  TContext
> => {
  const mutationKey = ['postSubscriptions']
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {
          ...options,
          mutation: {
            ...options.mutation,
            mutationKey,
          },
        }
    : {
        mutation: {
          mutationKey,
        },
        fetch: undefined,
      }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postSubscriptions>>,
    {
      data: PostSubscriptionsBody
    }
  > = (props) => {
    const { data } = props ?? {}

    return postSubscriptions(data, fetchOptions)
  }

  return {
    mutationFn,
    ...mutationOptions,
  }
}

export type PostSubscriptionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postSubscriptions>>
>
export type PostSubscriptionsMutationBody = PostSubscriptionsBody
export type PostSubscriptionsMutationError = PostSubscriptions400

/**
 * @summary Subscriber someone to the event
 */
export const usePostSubscriptions = <
  TError = PostSubscriptions400,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSubscriptions>>,
    TError,
    {
      data: PostSubscriptionsBody
    },
    TContext
  >
  fetch?: RequestInit
}): UseMutationResult<
  Awaited<ReturnType<typeof postSubscriptions>>,
  TError,
  {
    data: PostSubscriptionsBody
  },
  TContext
> => {
  const mutationOptions = getPostSubscriptionsMutationOptions(options)

  return useMutation(mutationOptions)
}
