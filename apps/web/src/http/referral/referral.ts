/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Connect
 * Full-stack app.
 * OpenAPI spec version: 1.0.0
 */
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useQuery } from '@tanstack/react-query'

import type {
  GetInvitesSubscriberId302,
  GetInvitesSubscriberId404,
  GetRanking200,
  GetRanking404,
  GetSubscribersSubscriberIdRanking200,
  GetSubscribersSubscriberIdRanking404,
  GetSubscribersSubscriberIdRankingClicks200,
  GetSubscribersSubscriberIdRankingClicks404,
  GetSubscribersSubscriberIdRankingCount200,
  GetSubscribersSubscriberIdRankingCount404,
} from '../../models'

/**
 * @summary Access invite link and redirects user
 */
export const getGetInvitesSubscriberIdUrl = (subscriberId: string) => {
  return `http://localhost:3333/invites/${subscriberId}`
}

export const getInvitesSubscriberId = async (
  subscriberId: string,
  options?: RequestInit,
): Promise<unknown> => {
  const res = await fetch(getGetInvitesSubscriberIdUrl(subscriberId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: unknown = body ? JSON.parse(body) : {}

  return data
}

export const getGetInvitesSubscriberIdQueryKey = (subscriberId?: string) => {
  return [`http://localhost:3333/invites/${subscriberId}`] as const
}

export const getGetInvitesSubscriberIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getInvitesSubscriberId>>,
  TError = GetInvitesSubscriberId302 | GetInvitesSubscriberId404,
>(
  subscriberId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getInvitesSubscriberId>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetInvitesSubscriberIdQueryKey(subscriberId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getInvitesSubscriberId>>
  > = ({ signal }) =>
    getInvitesSubscriberId(subscriberId, {
      signal,
      ...fetchOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!subscriberId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getInvitesSubscriberId>>,
    TError,
    TData
  > & {
    queryKey: QueryKey
  }
}

export type GetInvitesSubscriberIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInvitesSubscriberId>>
>
export type GetInvitesSubscriberIdQueryError =
  | GetInvitesSubscriberId302
  | GetInvitesSubscriberId404

/**
 * @summary Access invite link and redirects user
 */

export function useGetInvitesSubscriberId<
  TData = Awaited<ReturnType<typeof getInvitesSubscriberId>>,
  TError = GetInvitesSubscriberId302 | GetInvitesSubscriberId404,
>(
  subscriberId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getInvitesSubscriberId>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
): UseQueryResult<TData, TError> & {
  queryKey: QueryKey
} {
  const queryOptions = getGetInvitesSubscriberIdQueryOptions(
    subscriberId,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get subscriber invite clicks count
 */
export const getGetSubscribersSubscriberIdRankingClicksUrl = (
  subscriberId: string,
) => {
  return `http://localhost:3333/subscribers/${subscriberId}/ranking/clicks`
}

export const getSubscribersSubscriberIdRankingClicks = async (
  subscriberId: string,
  options?: RequestInit,
): Promise<GetSubscribersSubscriberIdRankingClicks200> => {
  const res = await fetch(
    getGetSubscribersSubscriberIdRankingClicksUrl(subscriberId),
    {
      ...options,
      method: 'GET',
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIdRankingClicks200 = body
    ? JSON.parse(body)
    : {}

  return data
}

export const getGetSubscribersSubscriberIdRankingClicksQueryKey = (
  subscriberId?: string,
) => {
  return [
    `http://localhost:3333/subscribers/${subscriberId}/ranking/clicks`,
  ] as const
}

export const getGetSubscribersSubscriberIdRankingClicksQueryOptions = <
  TData = Awaited<ReturnType<typeof getSubscribersSubscriberIdRankingClicks>>,
  TError = GetSubscribersSubscriberIdRankingClicks404,
>(
  subscriberId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getSubscribersSubscriberIdRankingClicks>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetSubscribersSubscriberIdRankingClicksQueryKey(subscriberId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSubscribersSubscriberIdRankingClicks>>
  > = ({ signal }) =>
    getSubscribersSubscriberIdRankingClicks(subscriberId, {
      signal,
      ...fetchOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!subscriberId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getSubscribersSubscriberIdRankingClicks>>,
    TError,
    TData
  > & {
    queryKey: QueryKey
  }
}

export type GetSubscribersSubscriberIdRankingClicksQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSubscribersSubscriberIdRankingClicks>>
>
export type GetSubscribersSubscriberIdRankingClicksQueryError =
  GetSubscribersSubscriberIdRankingClicks404

/**
 * @summary Get subscriber invite clicks count
 */

export function useGetSubscribersSubscriberIdRankingClicks<
  TData = Awaited<ReturnType<typeof getSubscribersSubscriberIdRankingClicks>>,
  TError = GetSubscribersSubscriberIdRankingClicks404,
>(
  subscriberId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getSubscribersSubscriberIdRankingClicks>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
): UseQueryResult<TData, TError> & {
  queryKey: QueryKey
} {
  const queryOptions = getGetSubscribersSubscriberIdRankingClicksQueryOptions(
    subscriberId,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get subscriber invites count
 */
export const getGetSubscribersSubscriberIdRankingCountUrl = (
  subscriberId: string,
) => {
  return `http://localhost:3333/subscribers/${subscriberId}/ranking/count`
}

export const getSubscribersSubscriberIdRankingCount = async (
  subscriberId: string,
  options?: RequestInit,
): Promise<GetSubscribersSubscriberIdRankingCount200> => {
  const res = await fetch(
    getGetSubscribersSubscriberIdRankingCountUrl(subscriberId),
    {
      ...options,
      method: 'GET',
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIdRankingCount200 = body
    ? JSON.parse(body)
    : {}

  return data
}

export const getGetSubscribersSubscriberIdRankingCountQueryKey = (
  subscriberId?: string,
) => {
  return [
    `http://localhost:3333/subscribers/${subscriberId}/ranking/count`,
  ] as const
}

export const getGetSubscribersSubscriberIdRankingCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getSubscribersSubscriberIdRankingCount>>,
  TError = GetSubscribersSubscriberIdRankingCount404,
>(
  subscriberId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getSubscribersSubscriberIdRankingCount>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetSubscribersSubscriberIdRankingCountQueryKey(subscriberId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSubscribersSubscriberIdRankingCount>>
  > = ({ signal }) =>
    getSubscribersSubscriberIdRankingCount(subscriberId, {
      signal,
      ...fetchOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!subscriberId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getSubscribersSubscriberIdRankingCount>>,
    TError,
    TData
  > & {
    queryKey: QueryKey
  }
}

export type GetSubscribersSubscriberIdRankingCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSubscribersSubscriberIdRankingCount>>
>
export type GetSubscribersSubscriberIdRankingCountQueryError =
  GetSubscribersSubscriberIdRankingCount404

/**
 * @summary Get subscriber invites count
 */

export function useGetSubscribersSubscriberIdRankingCount<
  TData = Awaited<ReturnType<typeof getSubscribersSubscriberIdRankingCount>>,
  TError = GetSubscribersSubscriberIdRankingCount404,
>(
  subscriberId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getSubscribersSubscriberIdRankingCount>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
): UseQueryResult<TData, TError> & {
  queryKey: QueryKey
} {
  const queryOptions = getGetSubscribersSubscriberIdRankingCountQueryOptions(
    subscriberId,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get subscriber ranking position
 */
export const getGetSubscribersSubscriberIdRankingUrl = (
  subscriberId: string,
) => {
  return `http://localhost:3333/subscribers/${subscriberId}/ranking`
}

export const getSubscribersSubscriberIdRanking = async (
  subscriberId: string,
  options?: RequestInit,
): Promise<GetSubscribersSubscriberIdRanking200> => {
  const res = await fetch(
    getGetSubscribersSubscriberIdRankingUrl(subscriberId),
    {
      ...options,
      method: 'GET',
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIdRanking200 = body
    ? JSON.parse(body)
    : {}

  return data
}

export const getGetSubscribersSubscriberIdRankingQueryKey = (
  subscriberId?: string,
) => {
  return [`http://localhost:3333/subscribers/${subscriberId}/ranking`] as const
}

export const getGetSubscribersSubscriberIdRankingQueryOptions = <
  TData = Awaited<ReturnType<typeof getSubscribersSubscriberIdRanking>>,
  TError = GetSubscribersSubscriberIdRanking404,
>(
  subscriberId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getSubscribersSubscriberIdRanking>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetSubscribersSubscriberIdRankingQueryKey(subscriberId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSubscribersSubscriberIdRanking>>
  > = ({ signal }) =>
    getSubscribersSubscriberIdRanking(subscriberId, {
      signal,
      ...fetchOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!subscriberId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getSubscribersSubscriberIdRanking>>,
    TError,
    TData
  > & {
    queryKey: QueryKey
  }
}

export type GetSubscribersSubscriberIdRankingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSubscribersSubscriberIdRanking>>
>
export type GetSubscribersSubscriberIdRankingQueryError =
  GetSubscribersSubscriberIdRanking404

/**
 * @summary Get subscriber ranking position
 */

export function useGetSubscribersSubscriberIdRanking<
  TData = Awaited<ReturnType<typeof getSubscribersSubscriberIdRanking>>,
  TError = GetSubscribersSubscriberIdRanking404,
>(
  subscriberId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getSubscribersSubscriberIdRanking>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
): UseQueryResult<TData, TError> & {
  queryKey: QueryKey
} {
  const queryOptions = getGetSubscribersSubscriberIdRankingQueryOptions(
    subscriberId,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get ranking
 */
export const getGetRankingUrl = () => {
  return `http://localhost:3333/ranking`
}

export const getRanking = async (
  options?: RequestInit,
): Promise<GetRanking200> => {
  const res = await fetch(getGetRankingUrl(), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetRanking200 = body ? JSON.parse(body) : {}

  return data
}

export const getGetRankingQueryKey = () => {
  return [`http://localhost:3333/ranking`] as const
}

export const getGetRankingQueryOptions = <
  TData = Awaited<ReturnType<typeof getRanking>>,
  TError = GetRanking404,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getRanking>>, TError, TData>
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetRankingQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRanking>>> = ({
    signal,
  }) =>
    getRanking({
      signal,
      ...fetchOptions,
    })

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRanking>>,
    TError,
    TData
  > & {
    queryKey: QueryKey
  }
}

export type GetRankingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRanking>>
>
export type GetRankingQueryError = GetRanking404

/**
 * @summary Get ranking
 */

export function useGetRanking<
  TData = Awaited<ReturnType<typeof getRanking>>,
  TError = GetRanking404,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getRanking>>, TError, TData>
  fetch?: RequestInit
}): UseQueryResult<TData, TError> & {
  queryKey: QueryKey
} {
  const queryOptions = getGetRankingQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
